#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select
import json
import threading
from threading import Timer
from sys import stdout
 
# pads the name with null bytes at the end
def pad(name):
        result = '\0' + name
        while len(result) < 108:
                result += '\0'
        return result


def broadcast_data(packet, source_socket):
        for x in sockets:
                if x != source_socket:
                        x.send(data)

def forwarding_data(packet, dest_socket):
        dest_socket.send(packet)

def building_ftable():
        global ftable



def broadcast_BPDU():
        dumped_bpdu = json.dumps(bpdu)
        for s in sockets:
                s.send(dumped_bpdu)

# broadcast BPDU periodically
def broadcast_BPDU_prdcly():
        t = Timer(0.5, broadcast_BPDU_prdcly)
        t.start()
        broadcast_BPDU()

# mutate global variable bpdu
def STP(bpdu1, bpdu2, port):
        #global bpdu
        global disable_ports
        global sockets
        # boolean variable for the result of comparison of root and
        # cost for bpdu1 and bpdu2. **for (only) keep the line short
        root_1 = bpdu1['message']['root']
        root_2 = bpdu2['message']['root']
        cost_1 = bpdu1['message']['cost']
        cost_2 = bpdu2['message']['cost']
        bridge_id_1 = bpdu1['message']['id']
        bridge_id_2 = bpdu2['message']['id']
        def change_bpdu():
                global bpdu
                root_id = bpdu2['message']['root']
                cost = bpdu2['message']['cost'] + 1
                bpdu = {"source":id, "dest":"ffff", "type": "bpdu", 
                        "message":{"id":id, "root":root_id, "cost":cost}}
        #print "LAN: ", LAN
        #print "sockets: ", sockets
        #print "port: ", port
        #print "disable_ports: ", disable_ports
        if root_2 < root_1:
                change_bpdu()
                print "New root:",bpdu1['source'],'/',root_2
                print "Root port:",bpdu1['source'],'/',port.getpeername().split("#")[3][0]
        elif root_2 == root_1 and cost_2 < cost_1:
                change_bpdu()
        elif root_2 == root_1 and cost_2 == cost_1 and bridge_id_2 < bridge_id_1:
                sockets.remove(port)                
                disable_ports.append(port)
                dp = []
                for x in disable_ports:
                        dp.append(x.getpeername().split("#")[3][0]) 
                print "Disabled port:",bpdu1['source'],'/',dp
        elif root_2 == root_1 and cost_2 == cost_1 and bridge_id_2 == bridge_id_1:
                sockets.remove(port)                
                disable_ports.append(port)
                dp = []
                for x in disable_ports:
                        dp.append(x.getpeername().split("#")[3][0]) 
                print "Disabled port:",bpdu1['source'],'/',dp
        #print "port: ", port
        #print "sockets: ", sockets
        #print "disable_ports: ", disable_ports
        #print "sockets: ", sockets



if __name__ == "__main__":
        id = sys.argv[1]
        LAN = sys.argv[2:]
        # take out duplicated LANs
        LAN = list(set(LAN))
        print "LAN: ", LAN
        sockets = []
        #forwarding table
        ftable = {}

        # creates sockets and connects to them
        for x in range(len(LAN)):
                s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
                s.connect(pad(LAN[x]))
                sockets.append(s)

        
        print "Bridge " + id + " starting up\n"



        # bpdu variables
        disable_ports = []
        # bpdu of this bridge (at initial state) (in json)
        bpdu = {"source":id, "dest":"ffff", "type": "bpdu", 
                "message":{"id":id, "root":id, "cost":0}}
        bpdu_temp = {}

        broadcast_BPDU_prdcly()
 
        # Main loop
        while True:
                # Calls select with all the sockets; change the timeout value (1)
                ready, ignore, ignore2 = select.select(sockets, [], [], 1)
                
                # Reads from each for the ready sockets
                for x in ready:
                        data = x.recv(1500)
                        data_d = json.loads(data)
                        if data_d['type'] == 'bpdu':
                                #print "received BPDU"
                                STP(bpdu, data_d, x)
                        else:
                                msgid = data_d['message']['id']
                                port_id = x.getpeername().split("#")[3][0]
                                source = data_d['source']
                                dest = data_d['dest']
                                print "Received message", msgid, "on port", port_id, "from", source, "to" ,dest
                                ftable[source] = x
                                if dest in ftable:
                                        if ftable[source] == ftable[dest]:
                                                print "Not forwarding message", msgid
                                        else:                                        
                                                #print "ftable[dest]: ", ftable[dest].getpeername().split("#")[3][0]
                                                print "Forwarding message", msgid, "to port", ftable[dest].getpeername().split("#")[3][0]
                                                forwarding_data(data, ftable[dest])
                                else:
                                        broadcast_data(data, ready[0])
                                        print "Broadcasting message", msgid, "to all ports"
                        #print(data)
                